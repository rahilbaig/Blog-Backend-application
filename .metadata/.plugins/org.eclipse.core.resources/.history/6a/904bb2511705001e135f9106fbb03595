package com.rahil.blog.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.rahil.blog.entity.Post;
import com.rahil.blog.payload.ApiResponse;
import com.rahil.blog.payload.PostDto;
import com.rahil.blog.service.Postservice;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/api")
public class PostController {
	
	@Autowired
	Postservice postservice;

	@PostMapping("/user/{userId}/category/{categoryId}/post")
	public ResponseEntity<PostDto> createPost(
			@Valid @RequestBody PostDto dto ,
			@PathVariable("userId") Integer userId,
			@PathVariable ("categoryId") Integer categoryId ){
		
		PostDto createPost=this.postservice.createPost(dto, userId, categoryId);
		
		return new ResponseEntity<PostDto>(createPost,HttpStatus.CREATED);
		
	}
	
	@GetMapping("/user/{userId}/posts")
	public ResponseEntity<List<PostDto>> getByUserId(@PathVariable Integer userId){
		List<PostDto> posts=this.postservice.getPostByUser(userId);
		return new ResponseEntity<List<PostDto>>(posts,HttpStatus.OK);
	}
	
	@GetMapping("/category/{categoryId}/posts")
	public ResponseEntity<List<PostDto>> getBycategory(@PathVariable Integer categoryId){
		List<PostDto> posts=this.postservice.getPostByCategory(categoryId);
		return new ResponseEntity<List<PostDto>>(posts,HttpStatus.OK);
	}
	
	@GetMapping("/posts/getAll")
	public ResponseEntity<List<PostDto>> getAllPosts( @RequestParam(value = "pageNumber",defaultValue = "10",required  = false), 
			@RequestParam(value = "pageSize",defaultValue = 1,required = false)){
		
		List<PostDto> dtos=this.postservice.getAllPost();
		
		return new ResponseEntity<List<PostDto>>(dtos,HttpStatus.OK);
		
	}
	@GetMapping("/post/{postId}")
	public ResponseEntity<PostDto> getpostById(@PathVariable Integer postId){
		PostDto dto=this.postservice.getPostById(postId);
		return new ResponseEntity<PostDto>(dto,HttpStatus.OK);
	}
	
	@PutMapping("/post/update/{id}")
	public ResponseEntity<PostDto> updatePOst(@RequestBody PostDto postDto ,@PathVariable Integer id){
		PostDto dto=this.postservice.updatePost(postDto, id);
		return new ResponseEntity<PostDto>(dto,HttpStatus.OK);
	}
	
	@DeleteMapping("/post/delete/{postId}")
	public  ResponseEntity<ApiResponse> deletePostById(@PathVariable Integer postId){
		this.postservice.deletePost(postId);
		
		return new ResponseEntity<ApiResponse>(new ApiResponse("post deleted successfull",true),HttpStatus.OK);
	}
	
}
